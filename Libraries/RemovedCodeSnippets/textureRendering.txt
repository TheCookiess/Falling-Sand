    /*glGenTextures(1, &textureID);
    glBindTexture(GL_TEXTURE_2D, textureID);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, textureWidth, textureHeight, 0, GL_RGBA, GL_UNSIGNED_BYTE, nullptr);

    std::vector<GLubyte> pixelData(textureWidth * textureHeight * 4, 255);

    glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, textureWidth, textureHeight, GL_RGBA, GL_UNSIGNED_BYTE, pixelData.data());
    */


    // C:/Users/User/Desktop/Vs Code/C++/ImGuiApps/PixelSimDESKTOP/Libraries/images/dandelion.jpg
    SDL_Surface* tempSurface = IMG_Load("dandelion.jpg"); 
    std::cout << "Loaded Image to surface! .." << std::endl;
    
    if (tempSurface == nullptr) {
        std::cout << "imageSurface NULL" << std::endl;
        return;
    }
    glGenTextures(1, &textureID);
    glBindTexture(GL_TEXTURE_2D, textureID);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, tempSurface->w, tempSurface->h, 0, GL_RGBA, GL_UNSIGNED_BYTE, nullptr);

    // put some code here, framebuffer here frame buffer there

    SDL_FreeSurface(tempSurface);